use org.openflexo.technologyadapter.emf.EMFModelSlot as EMF;
use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot as FMLRT;

import org.openflexo.technologyadapter.emf.model.EMFModel;
import org.openflexo.technologyadapter.emf.model.EMFObjectIndividual;
import java.lang.String;
import java.util.List;

import ["http://www.omg.org/spec/BPMN/20100524/MODEL-XMI"] as BPMN21;
import ["http://www.eclipse.org/uml2/5.0.0/UML"] as UML2;

import [UML2:"CommunicationPath"] as DEPLOYMENT_COMMUNICATION_PATH;
import [UML2:"Association"] as UML_ASSOCIATION;
import [BPMN21:"MessageFlow"] as BPMN_MESSAGE_FLOW;
import ["http://www.eclipse.org/uml2/5.0.0/UML"] as UML22;
import [BPMN21:"Association"] as BPMN_ASSOCIATION;
import [BPMN21:"TextAnnotation"] as BPMN_TEXT_ANNOTATION;
import [BPMN21:"DataObject"] as BPMNDataObject;
import [UML2:"Class"] as UML_CLASS;

typedef EMFObjectIndividualType(eClass=DEPLOYMENT_COMMUNICATION_PATH) as DeploymentCommunicationPath;
typedef EMFObjectIndividualType(eClass=UML_ASSOCIATION) as UMLAssociation;
typedef EMFObjectIndividualType(eClass=BPMN_ASSOCIATION) as BPMNAssociation;
typedef EMFObjectIndividualType(eClass=BPMN_TEXT_ANNOTATION) as BPMNTextAnnotation;
typedef EMFObjectIndividualType(eClass=BPMN_MESSAGE_FLOW) as BPMNMessageFlow;
typedef EMFObjectIndividualType(eClass= UML_CLASS) as UMLClass;


@URI("http://www.openflexo.org/projects/2024/1/FlightPlanNegociationFederation_1706652651621.prj/FlightPlanSecurityFederation.fml")
@Author("chahr")
public model FlightPlanSecurityFederation {

	EMFModel bpmnModelAccess with EMFModelSlot(metaModel=BPMN21,isRequired=true);
	EMFModel dataModelAccess with EMFModelSlot(metaModel=UML2,isRequired=true);
	EMFModel deployementModelAccess with EMFModelSlot(metaModel=UML2,isRequired=true);

	public create::createAccessObject(required Resource<EMFModel> bpmnModelResource, required Resource<EMFModel> dataModelResource, required Resource<EMFModel> deployementModelResource) {
      	bpmnModelAccess = parameters.bpmnModelResource.resourceData;
          dataModelAccess = parameters.dataModelResource.resourceData;
          deployementModelAccess = parameters.deployementModelResource.resourceData;
      }

	delete() {
	}

	public concept Correspondences {
		String [0,*] annotationsCommPath;
		String [0,*] annotationsObject;
		String [0,*] annotationsClass;
		
	    // --- Get the  annotation for the selected CommunicationPath ---//
		public List<String> getAnnotationsCommunicationPath(EMFObjectIndividual commPath) {
		for (DeploymentCommunicationPath itemPath : select DeploymentCommunicationPath from deployementModelAccess) {
			if (itemPath == parameters.commPath) {
				for (Object itemCommPath : itemPath.getValues("ownedElement")) {
					annotationsCommPath.add(itemCommPath.toString.substring(14).toString);	
				}	
				}
			}
			return annotationsCommPath;
		}
		
		public List<String> getAnnotationsObjects(EMFObjectIndividual object) {
			for (BPMNAssociation itemAsso : select BPMNAssociation from bpmnModelAccess) {
				if (itemAsso.targetRef == parameters.object) {
					annotationsObject.add(itemAsso.sourceRef.toString.substring(15).toString);	
				}
			}
			return annotationsObject;
		}

	public boolean verifySecurityAnnotation(List<String> annotaCommPath, List<String> annotaMessageFlow ) {
		for (BPMNTextAnnotation itemAnnota : select BPMNTextAnnotation from bpmnModelAccess) {
			if (parameters.annotaMessageFlow.contains(itemAnnota.id)) {
				if ((itemAnnota.text.contains("integrityMF") || itemAnnota.text.contains("confidentialityMF")) && parameters.annotaMessageFlow.contains("encypted")) { 
					return true; 
				}
			}
		}
		
		return false;
	}

	public List<String> getAnnotationClass( EMFObjectIndividual class) {
		for (UMLClass itemClasses : select UMLClass from dataModelAccess) {
			if (itemClasses.name == parameters.class) {
				log itemClasses.toString;
				for (Object itemClass : itemClasses.getValues("elementImport")) {
					annotationsClass.add(itemClass.toString.substring(13).toString);
				}
			}
		}

		return annotationsClass;
	}
		

		public concept MessageFlowCommunicationPathCorrespondences extends Correspondences  {
			EMFObjectIndividual messageFlow with EMFObjectRole(container=bpmnModelAccess);
	     	EMFObjectIndividual communicationPath with EMFObjectRole(container=deployementModelAccess);

	     	create::_create(required String messageName,required String comPathName) {
				messageFlow = select unique BPMNMessageFlow from bpmnModelAccess where (selected.name == parameters.messageName);
				communicationPath = select unique DeploymentCommunicationPath from deployementModelAccess where (selected.name == parameters.comPathName);
	     		/*for (EMFObjectIndividualType(eClass= UML_CLASS) itemCommPath : select EMFObjectIndividualType(eClass= UML_CLASS) from deployementModelAccess) {
	     			if (itemCommPath.name == parameters.nameCommPath) {
						communicationPath =itemCommPath;
				     }
	     		}

	     		for (EMFObjectIndividualType(eClass= UML_CLASS) itemMessage : select EMFObjectIndividualType(eClass= UML_CLASS) from bpmnModelAccess) {
	     			if (itemMessage.name == parameters.nameMessage) {
						messageFlow = itemMessage;
					}	
	     		}*/
	     	}

	       public flightPlanSecurityRule1() {
	     		
				boolean checkAnnotation = false;
				
				container.annotationsCommPath = container.getAnnotationsCommunicationPath(communicationPath);
				container.annotationsObject = container.getAnnotationsObjects(messageFlow);
				//checkAnnotation = container.verifySecurityAnnotation(annotationsCommPath,annotationsObject);
				log checkAnnotation.toString;
				if (checkAnnotation) {
					 log "Security rule1 is not violated";
					 }
			   else {
					 log "Security rule1 is violated";
			    }
			}
		
			
		}

		public concept DataObjectClass extends Correspondences{
			EMFObjectIndividual dataObject with EMFObjectRole(container=bpmnModelAccess);
			EMFObjectIndividual class with EMFObjectRole(container=dataModelAccess);


			create(required String nameDataObject,required String nameClass) {

				for (EMFObjectIndividualType(eClass= UML_CLASS) itemData : select EMFObjectIndividualType(eClass= UML_CLASS) from bpmnModelAccess) {
					if (itemData.name == parameters.nameDataObject) {
						dataObject = itemData;
					}
				}

				for (EMFObjectIndividualType(eClass= UML_CLASS) itemClass : select EMFObjectIndividualType(eClass= UML_CLASS) from dataModelAccess) {
					if (itemClass.name == parameters.nameClass) {
						class = itemClass;
					}
				}	
			}

		 public flightPlanSecurityRule2() {
		 	//container.annotationsObject.toString;
		 }
		
	     }
		}
		
	

}
