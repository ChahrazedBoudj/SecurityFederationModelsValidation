use org.openflexo.technologyadapter.emf.EMFModelSlot as EMF;
use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot as FMLRT;

import org.openflexo.technologyadapter.emf.model.EMFModel;
import org.openflexo.technologyadapter.emf.model.EMFObjectIndividual;
import java.lang.String;
import org.openflexo.foundation.ontology.IFlexoOntologyPropertyValue;

import ["http://www.example.org/metamodelProject/Metamodel/SOAMLmetaModel"] as SOAML_META_MODEL;
import ["http://www.example.org/metamodelProject/Metamodel/WSDLmetaModel"] as WSDLMETAMODEL;
import ["http://www.omg.org/spec/BPMN/20100524/MODEL-XMI"] as BPMN21;

import [BPMN21:"Participant"] as BPMN_PARTICIPANT;
import [BPMN21:"TextAnnotation"] as BPMN_TEXT_ANNOTATION;
import [BPMN21:"Association"] as BPMN_ASSOCIATION;

import [SOAML_META_MODEL:"Participant"] as SOAML_PARTICIPANT;
import [SOAML_META_MODEL:"Service_Contract"] as SOAML_CONTRACT;
import [SOAML_META_MODEL:"ParticipantRole"] as SOAML_PARTICIPANT_ROLE;

@URI("http://www.openflexo.org/projects/2024/1/SecurityRulesFederation_1704641601734.prj/SecurityModelsFederation.fml")
@Author("chahr")
public model SecurityModelsFederation {
	EMFModel soamlModelAceess with EMFModelSlot(metaModel=SOAML_META_MODEL,isRequired=true);
	EMFModel wsdlModelAcess with EMFModelSlot(metaModel=WSDLMETAMODEL,isRequired=true);
	EMFModel bpmnModelAccess with EMFModelSlot(metaModel=BPMN21,isRequired=true);

	 public create::createAccessObject(required Resource<EMFModel> bpmnModelResource, required Resource<EMFModel> wsdlModelResource, required Resource<EMFModel> soamlModelResource) {
      	soamlModelAceess = parameters.soamlModelResource.resourceData;
      	wsdlModelAcess = parameters.wsdlModelResource.resourceData;
      	bpmnModelAccess = parameters.bpmnModelResource.resourceData;
      }

	delete() {
	}

	public concept PoolParticipantLink {
		EMFObjectIndividual participant with EMFObjectRole(container=soamlModelAceess);
		EMFObjectIndividual pool with EMFObjectRole(container=bpmnModelAccess);
		
		delete() {
		}

		create::_create(required String name) {
			for (EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) item : select EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) from bpmnModelAccess) {	
				List<? extends Object> variable = item.getValues("name");

				if (variable.get(0).toString == parameters.name) {
					pool = item;
				}
			}

			
			for (EMFObjectIndividualType(eClass=SOAML_PARTICIPANT) partItem :  select EMFObjectIndividualType(eClass=SOAML_PARTICIPANT) from soamlModelAceess) {
				if (partItem.name == parameters.name) {
					participant = partItem;
				}
			}

		}

		public checkNames() {
			List<? extends Object> namesValues = pool.getValues("name");
			if (namesValues.get(0).toString == participant.name) {
				log "Matched names";
			}
			else {
				log "Unmatched names";
			}
		}

		public void checkSecurityAnnotations() {
			boolean check = false;
			List<? extends Object> associations = select EMFObjectIndividualType(eClass=BPMN_ASSOCIATION) from bpmnModelAccess;
			for (EMFObjectIndividualType(eClass=BPMN_ASSOCIATION) asso : associations) {
				if (asso.targetRef.id == pool.name) {
					List<? extends Object> annotations = select EMFObjectIndividualType(eClass=BPMN_TEXT_ANNOTATION) from bpmnModelAccess;
					for (EMFObjectIndividualType(eClass=BPMN_TEXT_ANNOTATION) annotation : annotations) {
						if (annotation.id == asso.sourceRef.id) {
							for (EMFObjectIndividualType(eClass=SOAML_PARTICIPANT_ROLE) item : select EMFObjectIndividualType(eClass=SOAML_PARTICIPANT_ROLE) from soamlModelAceess) {
								if (item.name == participant.name + "Role") {
									List<? extends Object> privacy = item.getValues("privacy");
									List<? extends Object> access = item.getValues("accesscontrol");
									
									if (privacy != null && annotation.text.contains("privacy")) {
										check = true;
									} 
			
									if ( access != null && annotation.text.contains("accesscontrol")) {
										check = true;
									} 
else {
										check = false;
									}
								}
							}
						}
					}
				}
			}
			if (check) {
				log "Security annotation verification succeeded";
			} 
else {
				log "Security annotation verification failed";
			}
		}

	}
}
