namespace "http://www.openflexo.org/projects/2024/1/ITrustMedicalSystem_1705498447306.prj" as ITRUSTMEDICALSYSTEM_1705498447306PRJ;

use org.openflexo.technologyadapter.emf.EMFModelSlot as EMF;
use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot as FMLRT;

import org.openflexo.technologyadapter.emf.model.EMFModel;
import org.openflexo.technologyadapter.emf.model.EMFObjectIndividual;
import java.lang.String;
import org.openflexo.foundation.ontology.IFlexoOntologyPropertyValue;
import java.util.List;

import ["http://www.omg.org/spec/BPMN/20100524/MODEL-XMI"] as BPMN21;

import ["http://www.example.org/deployementEcoreMetaModel"] as DEPLOYEMENT_ECORE_META_MODEL;
import ["http://www.eclipse.org/uml2/5.0.0/UML"] as UML2;

import [BPMN21:"Participant"] as BPMN_PARTICIPANT;
import [DEPLOYEMENT_ECORE_META_MODEL:"Artifact"] as DEPLOYMENT_ARTIFACT;
import [BPMN21:"MessageFlow"] as BPMN_MESSAGE_FLOW;
import [BPMN21:"TextAnnotation"] as BPMN_TEXT_ANNOTATION;
import [BPMN21:"Association"] as BPMN_ASSOCIATION;
import [BPMN21:"Process"] as BPMN_PROCESS;
import [BPMN21:"DataObject"] as BPMN_DATAOBJECT;
import [DEPLOYEMENT_ECORE_META_MODEL:"Deploy"] as DEPLOYMENT_DEPLOY;
import [DEPLOYEMENT_ECORE_META_MODEL:"Association"] as DEPLOYMENT_ASSOCIATION;
import [DEPLOYEMENT_ECORE_META_MODEL:"CommunicationPath"] as DEPLOYMENT_COMMUNICATION_PATH;
import ["http://www.eclipse.org/uml2/5.0.0/UML"] as UML22;
import [UML22:"Class"] as DATA_USER;
import [UML2:"Class"] as DATA_USER;

import ["AccessControlMetamodel"] as ACCESS_CONTROL_METAMODEL2;
import [ACCESS_CONTROL_METAMODEL2:"ROLE"] as ACCESS_CONTROL_ROLE;

@URI("http://www.openflexo.org/projects/2024/1/ITrustMedicalSystemFederation_1705933420738.prj/ITrustSecurityFederation.fml")
@Author("chahr")
public model ITrustSecurityFederation {
	EMFModel bpmnModelAccess with EMFModelSlot(metaModel=BPMN21,isRequired=true);
	EMFModel deploymentModelAccess with EMFModelSlot(metaModel=DEPLOYEMENT_ECORE_META_MODEL,isRequired=true);
	EMFModel accessControlModelAccess with EMFModelSlot(metaModel=ACCESS_CONTROL_METAMODEL2,isRequired=true);
	EMFModel dataModelAccess with EMFModelSlot(metaModel=UML2,isRequired=true);
	
	MessageFlowCommunicationPathCorrepondence[0,*] listInstancesMessageComm with ConceptInstance(virtualModelInstance=this);
	PoolArtifactCorrespondence[0,*] listInstancesPoolArtifact with ConceptInstance(virtualModelInstance=this);
     EMFObjectIndividual devices with EMFObjectRole(container=this);
     EMFObjectIndividual[0,*] artifactsList with EMFObjectRole(container=this);
     EMFObjectIndividual[0,*] poolList with EMFObjectRole(container=this);
     UserRoleLink[0,*] listUserRoleLink with ConceptInstance(virtualModelInstance=this);


	public create::createAccessObject(required Resource<EMFModel> bpmnModelResource, required Resource<EMFModel> deploymentModelResource, required Resource<EMFModel> dataModelResource, required Resource<EMFModel> accessControlModelResource) {
      	bpmnModelAccess = parameters.bpmnModelResource.resourceData;
          deploymentModelAccess = parameters.deploymentModelResource.resourceData;
          dataModelAccess = parameters.dataModelResource.resourceData;
    		accessControlModelAccess = parameters.accessControlModelResource.resourceData;
      }




      public verifyAllMessageCommPath() {
 
      	List<MessageFlowCommunicationPathCorrepondence> objs = select MessageFlowCommunicationPathCorrepondence from this;
      	for (MessageFlowCommunicationPathCorrepondence instanceMesageComm :objs ) {
      		if (instanceMesageComm.verifySecureCommunication() == true) {
      			log "The Security rules is not violated"; 
      		}
		}
      	
      }

       public verifyChange(required String name) {	
		List<PoolArtifactCorrespondence> objs = select PoolArtifactCorrespondence from this;
		for (PoolArtifactCorrespondence item : objs) {
			if (parameters.name == item.artifact.name) {
				item.iTrustSecurityRule1();
			}
		}
    }

	  public fillListInstanceMessageFlowComm(String nameArtifact) {
	  	List<MessageFlowCommunicationPathCorrepondence> objs = select MessageFlowCommunicationPathCorrepondence from this;
		for (MessageFlowCommunicationPathCorrepondence item : objs) {
			//listInstancesMessageComm.add(item);			


}    	
	 }


     // --- verify whether an artifact is a part of PoolArtifactLink intances and return the artifact --- //
	public  List<EMFObjectIndividual> verifyExistenceCorresp(String nameArtifact) {
		artifactsList = null;
		List<PoolArtifactCorrespondence> objs = select PoolArtifactCorrespondence from this;
	 	for (PoolArtifactCorrespondence item : objs ) {
	 		if (item.artifact.name.toString == parameters.nameArtifact) {
				artifactsList.add(item.artifact);
			}	
	 	}
	 	return artifactsList;
	}

    // --- Retrieve the list of Pools related to an Artifact selected --- //
	public  List<EMFObjectIndividual> getPool(String nameArtifact) {
		poolList =null;
		List<PoolArtifactCorrespondence> objs = select PoolArtifactCorrespondence from this;
	 	for (PoolArtifactCorrespondence item : objs ) {
			if (item.artifact.name.toString == parameters.nameArtifact) {
				poolList.add(item.pool);
			}
	 	}
	 	return poolList;
	}

	delete() {
		delete devices;

	}

    public concept Correspondences {
    	
    

     public concept PoolArtifactCorrespondence extends Correspondences {
     	EMFObjectIndividual pool with EMFObjectRole(container=bpmnModelAccess);
     	EMFObjectIndividual artifact with EMFObjectRole(container=deploymentModelAccess);
     	MessageFlowCommunicationPathCorrepondence[0,*] listInstancesMessageComm with ConceptInstance(virtualModelInstance=container.container);
     	PoolArtifactCorrespondence[0,*] listInstancesPoolArtifact1 with ConceptInstance(virtualModelInstance=container.container);
     	EMFObjectIndividual [0,*] devicesArtifact with EMFObjectRole(container=this);
     	EMFObjectIndividual [0,*] assoArtifacts with EMFObjectRole(container=this);
     	EMFObjectIndividual [0,*] flowElements with EMFObjectRole(container=this);
     	EMFObjectIndividual [0,*] annotations with EMFObjectRole(container=this);
     	EMFObjectIndividual [0,*] messageFlows with EMFObjectRole(container=this);
     	EMFObjectIndividual [0,*] listAnnotation with EMFObjectRole(container=this);
     	EMFObjectIndividual assoArtifactsA with EMFObjectRole(container=this);
     	EMFObjectIndividual [0,*] assoArtifactsFilter with EMFObjectRole(container=this);
     	EMFObjectIndividual [0,*] assoArtifactsFilter1 with EMFObjectRole(container=this);
     	EMFObjectIndividual [0,*] devicesArtifactsFilter with EMFObjectRole(container=this);
     	EMFObjectIndividual [0,*] commPath with EMFObjectRole(container=this);
	     String[0,*] listAssoArtifact;

     	create::_create(required String name) {	
		for (EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) itemPool : select EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) from bpmnModelAccess) {
			if (itemPool.name == parameters.name) {
				pool = itemPool;
			}
		}

		 for (EMFObjectIndividualType(eClass=DEPLOYMENT_ARTIFACT) itemArtifact : select EMFObjectIndividualType(eClass=DEPLOYMENT_ARTIFACT) from deploymentModelAccess) {
	         	if (itemArtifact.nameArtifact == parameters.name) {
	         		artifact =itemArtifact;	
	  	 	}
		}
		
        }  

	delete() {
		delete pool;
		delete artifact;
	}




     // --- Retrieve the list of devices where the artifact is deployed --- //
	public List<EMFObjectIndividual> getDeploymentDevices(EMFObjectIndividual nameArtifact) {
		this.devicesArtifact = null;
		for (EMFObjectIndividualType(eClass=DEPLOYMENT_DEPLOY) itemDeploy : select EMFObjectIndividualType(eClass=DEPLOYMENT_DEPLOY) from deploymentModelAccess) {
			if (itemDeploy.artifact == parameters.nameArtifact) {
				if (itemDeploy.device != null ) {
					this.devicesArtifact.add(itemDeploy.device);
				}
				else {
					if (itemDeploy.node != null) {
						this.devicesArtifact.add(itemDeploy.node);
					}
				}		
			}	
		}
		return this.devicesArtifact;	
		
	}

     // --- Get the list flowElements for a Pool ---//
	public List<EMFObjectIndividual> getFlowElements(EMFObjectIndividual pool) {
		this.flowElements = null;
		List<? extends Object> listParticipant = select EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) from bpmnModelAccess;
		for (EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) parti : listParticipant) {
			int n = parti.processRef.flowElements.size();
			if (parti.id.toString == parameters.pool.name.toString) {
				 for (int j=0 ; j < n ; j++) {
				 	flowElements.add(parti.processRef.flowElements.get(j));
				 }
				
			}
		}
		
		return flowElements;
	}

	// --- Get the list of the associated Artifacts --- //

	public List<String> verifyExistenceArtifactAssociated(String nameArtifact) {

		boolean existe = false;
		listAssoArtifact = null;
		for (EMFObjectIndividualType(eClass=DEPLOYMENT_ASSOCIATION) itemAsso : select EMFObjectIndividualType(eClass=DEPLOYMENT_ASSOCIATION) from deploymentModelAccess) {
	      	for (Object itemArtifact : itemAsso.getValues("artifact")) { 
	       	     if (itemArtifact.toString.substring(9) == artifact.name ) {
	       	       	existe = true;	   	
	       	      }
				else {
	       	      	existe = false;
	       	      }
	   
	       	}
	       	if (existe) {
	       		for (Object itemArtifact : itemAsso.getValues("artifact")) {
	       		  	if (!(itemArtifact.toString.substring(9).toString == artifact.name)) {
						listAssoArtifact.add(itemArtifact.toString.substring(9).toString);
					}
	       		  }       	
	       	}			
		}
		return listAssoArtifact;
	}

  	 // --- Get the Security annotation for the selected flowElement ---//
    	public boolean checkAnnotations(String flowElements) {
     
	    	  List<? extends Object> associations = select EMFObjectIndividualType(eClass=BPMN_ASSOCIATION) from bpmnModelAccess;
	    	  List<? extends Object> annotations = select EMFObjectIndividualType(eClass=BPMN_TEXT_ANNOTATION) from bpmnModelAccess;
	    	  boolean checkannotation = false;
	    	  for (EMFObjectIndividualType(eClass=BPMN_ASSOCIATION) asso : associations) {
	    	  	for (EMFObjectIndividualType(eClass=BPMN_TEXT_ANNOTATION) annotation : annotations) {
	    	  		if (parameters.flowElements == asso.sourceRef.id && annotation.id == asso.targetRef.id ) {
	    	  			if (annotation.text.contains("IntegrityDo") || annotation.text.contains("ConfidentialityDo") || annotation.text.contains("PrivacyDo")) {
	    	  				checkannotation = true;
	    	  			}
					else {
	    	  				checkannotation = false;
	    	  			}	
	    	  		}
	    	    	}
    	  }
    	  return checkannotation;
    }

    // --- Get list of MessageFlow owned to a pool --- //
    public List<EMFObjectIndividual> getMessageFlow (EMFObjectIndividual pool) {

    	 List<? extends Object> listParticipant = select EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) from bpmnModelAccess;
    	 List<? extends Object> listMessageFlow = select EMFObjectIndividualType(eClass=BPMN_MESSAGE_FLOW)  from bpmnModelAccess;
    	 messageFlows = null;
	 for (EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) parti : listParticipant) {
	 	if (parti.id.toString == parameters.pool.name.toString) {
		 	int n = parti.processRef.flowElements.size();
		 	for (EMFObjectIndividualType(eClass=BPMN_MESSAGE_FLOW) dataflow :listMessageFlow)  {
				for (int j=0 ; j < n ; j++) {
					if (dataflow.sourceRef.toString == parti.processRef.flowElements.get(j).toString) {
						messageFlows.add(dataflow);
						
					}
				}
		 	}
	 	}
	 	
	 }

    	 return messageFlows;
    }

    
    // --- Get list of Communication Path owned to a device --- //
    public List<EMFObjectIndividual> getCommunication(EMFObjectIndividual device) {
    	     commPath = null;
    		List<? extends Object> listCommuPath = select EMFObjectIndividualType(eClass=DEPLOYMENT_COMMUNICATION_PATH)  from deploymentModelAccess; 		
    		for (EMFObjectIndividualType(eClass=DEPLOYMENT_COMMUNICATION_PATH) commPath1 :listCommuPath ) {
    			if (commPath1.device.name.toString == parameters.device.name) {
    				commPath.add(commPath1);
    			}
    		}

    	return commPath;
    	}

     // --- verify if the deployement of two artifacts ---//
	public boolean verifyDeploy(List<EMFObjectIndividual> deviceArtifact, List<EMFObjectIndividual> devicesAssoArtifact ) {
		
		for (EMFObjectIndividual device : parameters.deviceArtifact) {
			if (!parameters.devicesAssoArtifact.contains(device)) {
				return false;	
			}
		}
			
		return true;
	}
    
     // iTrust Security Rule1
	public iTrustSecurityRule1() {
	
		boolean checkConfidentialData = false;
		this.flowElements = this.getFlowElements(pool);
		for (EMFObjectIndividual flowElt : flowElements ) {
			checkConfidentialData  = this.checkAnnotations(flowElt.toString.substring(11));
			if (checkConfidentialData == true && !this.verifyExistenceConsistentInstance()) {
				log "Security rule violated";	
			}
               else {
				log "Security rule not violated";		
			}
		}	
	}

	// --- Verify the Security Rule2 whether the two artifacts are deployed in differents devices
	public boolean verifyExistenceConsistentInstance() {

    	     List<EMFObjectIndividual> assoPool;
    	     List<EMFObjectIndividual> commPath;
    	     listInstancesMessageComm = container.listInstancesMessageComm;
		this.listAssoArtifact = this.verifyExistenceArtifactAssociated(artifact.name); 
		for (String assoArtifact : listAssoArtifact) {
			assoArtifactsFilter = container.container.verifyExistenceCorresp(assoArtifact);	
		}
		this.devicesArtifact = this.getDeploymentDevices(artifact);
		for (EMFObjectIndividual device : devicesArtifact) {
			this.commPath =this.getCommunication(device); 	
		}
		this.messageFlows = this.getMessageFlow(pool);
		for (EMFObjectIndividual assoArtifactFilt : assoArtifactsFilter) {
			assoPool = container.container.getPool(assoArtifactFilt.name);
			devicesArtifactsFilter =  this.getDeploymentDevices(assoArtifactFilt);
			if (!this.verifyDeploy(devicesArtifact,devicesArtifactsFilter)) {
				for (EMFObjectIndividual dataflow : messageFlows) {
					for (MessageFlowCommunicationPathCorrepondence item : listInstancesMessageComm) {	
						if (dataflow == item.messageFlow.name && this.commPath.contains(item.communicationPath)) {
							if (!item.verifySecureCommunication()) {
								return false;
							}
						 }
					  }	
				  }
			   }
			} 
		return true;
		}
     	
     }


     public concept MessageFlowCommunicationPathCorrepondence extends Correspondences {
		EMFObjectIndividual messageFlow with EMFObjectRole(container=bpmnModelAccess);
     	EMFObjectIndividual communicationPath with EMFObjectRole(container=deploymentModelAccess);

     	create::_create(required String nameMessage,required String nameCommPath) {	
     		
     		for (EMFObjectIndividualType(eClass=BPMN_MESSAGE_FLOW) itemMessage : select EMFObjectIndividualType(eClass=BPMN_MESSAGE_FLOW) from bpmnModelAccess) {
				if (itemMessage.name == parameters.nameMessage) {
					messageFlow = itemMessage;
				}
			}
	       	 for (EMFObjectIndividualType(eClass=DEPLOYMENT_COMMUNICATION_PATH) itemCommPath : select EMFObjectIndividualType(eClass=DEPLOYMENT_COMMUNICATION_PATH) from deploymentModelAccess) {
	        		if (itemCommPath.name == parameters.nameCommPath) {
					communicationPath =itemCommPath;
				}
	      	 }
	                 		         
	     }
	//--- iTrustSecurityRule2
  	public boolean verifySecureCommunication() {
  		boolean check = false;
  		log communicationPath.toString;
  		List<? extends Object> encrypted = communicationPath.getValues("encrypted");
  		List<? extends Object> annotations = select EMFObjectIndividualType(eClass=BPMN_TEXT_ANNOTATION) from bpmnModelAccess; 
  		List<? extends Object> associations = select EMFObjectIndividualType(eClass=BPMN_ASSOCIATION) from bpmnModelAccess;
  		for (EMFObjectIndividualType(eClass=BPMN_ASSOCIATION) asso : associations ) {
  			if (asso.targetRef.id == messageFlow.toString.substring(12)) {
  				for (EMFObjectIndividualType(eClass=BPMN_TEXT_ANNOTATION) annota : annotations) {
  					if (asso.sourceRef.id == annota.id) {
  						if (encrypted != null && (annota.text.contains("NonRepudMF") || annota.text.contains("ConfidentialityMF") || annota.text.contains("IntegrityMF")) ) {
							check =true;
						}
						else {
							check = false;
						     }
					}
							
  				}	
  			}
  		}
     	return check;
  	  }
     

	delete() {
		delete messageFlow;
		delete communicationPath;
	}
	}
    }

    // --- Check if the user has a valide role --- //
	public boolean checkUserRole(required String userName) {
	    boolean checked = false;
	    List<UserRoleLink> links = select UserRoleLink from this;
	    
	    for (UserRoleLink item : links) {
	        if (item.user.name == parameters.userName && item.verifyCorrespondence()) {
	            checked = true;
	        }
	    }
	    
	    return checked;
	}
	
	// --- Run the 3rd iTrust security rule --- //
	public void iTrustRule3(required String name) {
	    boolean checked = false;
	    List<UserRoleLink> links = select UserRoleLink from this;
	    checked = this.checkUserRole(parameters.name);
	
	    if (!checked) {
	        for (UserRoleLink item : links) {	
	            if (item.user.getValues("member").toString.contains(parameters.name) && this.checkUserRole(item.user.name)) {
	                checked = true;
	            }
	        }
	    }
	
	    if (checked) {
	        log "Security rule verified";
	    } 
else {
	        log "Security rule violated";
	    }
	    
	}

   public concept UserRoleLink {
        EMFObjectIndividual user with EMFObjectRole(container=dataModelAccess);
        EMFObjectIndividual role with EMFObjectRole(container=accessControlModelAccess);
        
        create::_create(required String roleName, required  String userName) {
            for (EMFObjectIndividualType(eClass=DATA_USER) userItem : select EMFObjectIndividualType(eClass=DATA_USER) from dataModelAccess) {
                if (userItem.name == parameters.userName) {    
                    user = userItem;
                }
            }

            for (EMFObjectIndividualType(eClass=ACCESS_CONTROL_ROLE) roleItem : select EMFObjectIndividualType(eClass=ACCESS_CONTROL_ROLE) from accessControlModelAccess) {
                if (roleItem.nameRole == parameters.roleName) {
                    role = roleItem;
                }
            }
        }

        delete() {
        
        }

        public boolean verifyCorrespondence() {
            if (user == null || role == null) {
                return false;
            }
            else {
                return true;
            }
        }
    }

}
