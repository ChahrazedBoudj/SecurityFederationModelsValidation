namespace "http://www.openflexo.org/projects/2024/1/ITrustMedicalSystem_1705498447306.prj" as ITRUSTMEDICALSYSTEM_1705498447306PRJ;

use org.openflexo.technologyadapter.emf.EMFModelSlot as EMF;
use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot as FMLRT;

import org.openflexo.technologyadapter.emf.model.EMFModel;
import org.openflexo.technologyadapter.emf.model.EMFObjectIndividual;
import java.lang.String;
import org.openflexo.foundation.ontology.IFlexoOntologyPropertyValue;
import java.util.List;

import ["http://www.omg.org/spec/BPMN/20100524/MODEL-XMI"] as BPMN21;
import ["http://www.example.org/deployementEcoreMetaModel"] as DEPLOYEMENT_ECORE_META_MODEL;

import [BPMN21:"Participant"] as BPMN_PARTICIPANT;
import [DEPLOYEMENT_ECORE_META_MODEL:"Artifact"] as DEPLOYMENT_ARTIFACT;
import [BPMN21:"MessageFlow"] as BPMN_MESSAGE_FLOW;
import [BPMN21:"TextAnnotation"] as BPMN_TEXT_ANNOTATION;
import [BPMN21:"Association"] as BPMN_ASSOCIATION;
import [BPMN21:"Process"] as BPMN_PROCESS;
import [BPMN21:"DataObject"] as BPMN_DATAOBJECT;
import [DEPLOYEMENT_ECORE_META_MODEL:"Deploy"] as DEPLOYMENT_DEPLOY;
import [DEPLOYEMENT_ECORE_META_MODEL:"Association"] as DEPLOYMENT_ASSOCIATION;
import [DEPLOYEMENT_ECORE_META_MODEL:"CommunicationPath"] as DEPLOYMENT_COMMUNICATION_PATH;

@URI("http://www.openflexo.org/projects/2024/1/ITrustMedicalSystemFederation_1705933420738.prj/ITrustSecurityFederation.fml")
@Author("chahr")
public model ITrustSecurityFederation {
	EMFModel bpmnModelAccess with EMFModelSlot(metaModel=BPMN21,isRequired=true);
	EMFModel deploymentModelAccess with EMFModelSlot(metaModel=DEPLOYEMENT_ECORE_META_MODEL,isRequired=true);
	MessageFlowCommunicationPathLink[0,*] listInstancesMessageComm with ConceptInstance(virtualModelInstance=this);
	PoolArtifactLink[0,*] listInstancesPoolArtifact with ConceptInstance(virtualModelInstance=this);
     EMFObjectIndividual devices with EMFObjectRole(container=this);

	 public create::createAccessObject(required Resource<EMFModel> bpmnModelResource, required Resource<EMFModel> deploymentModelResource) {
      	bpmnModelAccess = parameters.bpmnModelResource.resourceData;
          deploymentModelAccess = parameters.deploymentModelResource.resourceData;
      }




      public verifyAllMessageCommPath() {
 
      	List<MessageFlowCommunicationPathLink> objs = select MessageFlowCommunicationPathLink from this;
      	for (MessageFlowCommunicationPathLink instanceMesageComm :objs ) {
      		if (instanceMesageComm.verifySecureCommunication() == true) {
      			log "The Security rules is not violated"; 
      		}
		}
      	
      }

       public verifyRule(required String name) {	
		List<PoolArtifactLink> objs = select PoolArtifactLink from this;
		for (PoolArtifactLink item : objs) {
			if (parameters.name == item.artifact.name) {
				item.iTrustSecurityRule1();
			}
		}
    }

	  public fillListInstanceMessageFlowComm() {
	  	List<MessageFlowCommunicationPathLink> objs = select MessageFlowCommunicationPathLink from this;
		for (MessageFlowCommunicationPathLink item : objs) {
			//listInstancesMessageComm.add(item);			
		


}    	
	 }

	 public fillInstancePoolArtifact() {
	 	List<PoolArtifactLink> objs = select PoolArtifactLink from this;
	 	for (PoolArtifactLink item : objs ) {
			//listInstancesPoolArtifact.add(item);
			log item.toString;			
		}	
	 }


     public concept PoolArtifactLink {
     	EMFObjectIndividual pool with EMFObjectRole(container=bpmnModelAccess);
     	EMFObjectIndividual artifact with EMFObjectRole(container=deploymentModelAccess);
     	MessageFlowCommunicationPathLink[0,*] listInstancesMessageComm with ConceptInstance(virtualModelInstance=container);
     	EMFObjectIndividual [0,*] devices1 with EMFObjectRole(container=this);
     	EMFObjectIndividual [0,*] assoArtifacts with EMFObjectRole(container=this);
     	EMFObjectIndividual [0,*] flowElements with EMFObjectRole(container=this);
     	EMFObjectIndividual [0,*] annotations with EMFObjectRole(container=this);
     	EMFObjectIndividual [0,*] messageFlows with EMFObjectRole(container=this);
     	EMFObjectIndividual [0,*] listAnnotation with EMFObjectRole(container=this);
     	EMFObjectIndividual assoArtifactsA with EMFObjectRole(container=this);
	     String[0,*] listAssoArtifact;

     	create::_create(required String name) {	
		for (EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) itemPool : select EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) from bpmnModelAccess) {
			if (itemPool.name == parameters.name) {
				pool = itemPool;
			}
		}

		 for (EMFObjectIndividualType(eClass=DEPLOYMENT_ARTIFACT) itemArtifact : select EMFObjectIndividualType(eClass=DEPLOYMENT_ARTIFACT) from deploymentModelAccess) {
	         	if (itemArtifact.nameArtifact == parameters.name) {
	         		artifact =itemArtifact;	
	  	 	}
		}
		//listInstancesPoolArtifact.add(this);
	
		
        }
         

	delete() {
		delete pool;
		delete artifact;
	}


	public iTrustSecurityRule1() {
		devices = null;
		List<? extends Object> listParticipant = select EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) from bpmnModelAccess;
		List<? extends Object> listProcess = select EMFObjectIndividualType(eClass=BPMN_PROCESS) from bpmnModelAccess;
		List<? extends Object> associations = select EMFObjectIndividualType(eClass=BPMN_ASSOCIATION) from bpmnModelAccess;
		List<? extends Object> annotations = select EMFObjectIndividualType(eClass=BPMN_TEXT_ANNOTATION) from bpmnModelAccess;
		for (EMFObjectIndividualType(eClass=DEPLOYMENT_DEPLOY) itemDeploy : select EMFObjectIndividualType(eClass=DEPLOYMENT_DEPLOY) from deploymentModelAccess) {
			if (itemDeploy.artifact.nameArtifact == artifact.name) {
				if (itemDeploy.device != null ) {
					devices = itemDeploy.device;
				}
				else {
					if (itemDeploy.node != null) {
						devices = itemDeploy.node;
					}
				}		
			}	
		}

		for (EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) parti : listParticipant) {
			if (parti.id.toString == pool.name.toString) {
				int n = parti.processRef.flowElements.size();
				boolean checkInstance = false;
				for (EMFObjectIndividualType(eClass=BPMN_ASSOCIATION) asso : associations) {
                    	for (EMFObjectIndividualType(eClass=BPMN_TEXT_ANNOTATION) annotation : annotations) {
                         	 for (int j=0 ; j < n ; j++) {
						 	if (asso.sourceRef.id == parti.processRef.flowElements.get(j).id && annotation.id == asso.targetRef.id ) {
								if (annotation.text.contains("IntegrityDo") && annotation.text.contains("ConfidentialityDo") ) {
									/*--- Verify whether the instance existe and the security rule1 added to the correspondences MessageFlowCommunicationPathLink is not violated ---*/
							          checkInstance = this.verifyExistenceConsistentInstance();
							          
							     	if (checkInstance) {
							     		log"intance exist and security rules not violated";
							     	}
									else {
										log"intance no exist";   		
								     }
							    	 } 
							    	else {
									log"Security rule violated";   		
								}
							}
						}
					}
				}
			}
		}

		
		
	}

	public boolean verifyExistenceConsistentInstance() {     
		List<? extends Object> listParticipant = select EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) from bpmnModelAccess;
		List<? extends Object> listProcess = select EMFObjectIndividualType(eClass=BPMN_PROCESS) from bpmnModelAccess;
		List<? extends Object> listMessageFlow = select EMFObjectIndividualType(eClass=BPMN_MESSAGE_FLOW)  from bpmnModelAccess;
		List<? extends Object> listCommuPath = select EMFObjectIndividualType(eClass=DEPLOYMENT_COMMUNICATION_PATH)  from deploymentModelAccess;
		boolean existInstance = false;
		boolean resu = false;
		listInstancesMessageComm = container.listInstancesMessageComm;
		for (EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) parti : listParticipant) {
			if (parti.id.toString == pool.name.toString) {
				int n = parti.processRef.flowElements.size();
				int m = container.listInstancesMessageComm.size();
				for (EMFObjectIndividualType(eClass=BPMN_MESSAGE_FLOW) dataflow :listMessageFlow)  {
				     for (int j=0 ; j < n ; j++) {
							if (dataflow.sourceRef.toString == parti.processRef.flowElements.get(j).toString) {
								for (MessageFlowCommunicationPathLink item : listInstancesMessageComm) {	
									if (dataflow.id == item.messageFlow.name) {
										for (EMFObjectIndividualType(eClass=DEPLOYMENT_COMMUNICATION_PATH) commPath :listCommuPath ) {
											if (commPath.name == item.communicationPath.name && commPath.device.name.toString == devices.name) {
												existInstance = true;
												/*--- Request the evaluation of the security rule attached to the instance of the correspondences MessageFlowCommunicationPathLink ---*/
												 resu = item.verifySecureCommunication();
												
											}
											else {
												existInstance = false;
											}
										}	
									}	
							}
						}
				     }
				}
			}
		}
	 return existInstance;
	}

     // --- Retrieve the list of devices where the artifact is deployed --- ///
	public List<EMFObjectIndividual> getDeploymentDevices(EMFObjectIndividual nameArtifact) {
		this.devices1 = null;
		for (EMFObjectIndividualType(eClass=DEPLOYMENT_DEPLOY) itemDeploy : select EMFObjectIndividualType(eClass=DEPLOYMENT_DEPLOY) from deploymentModelAccess) {
			if (itemDeploy.artifact == parameters.nameArtifact) {
				if (itemDeploy.device != null ) {
					this.devices1.add(itemDeploy.device);
				}
				else {
					if (itemDeploy.node != null) {
						this.devices1.add(itemDeploy.node);
					}
				}		
			}	
		}
		return this.devices1;	
		
	}

     // --- Get the list flowElements for a Pool ---//
	public List<EMFObjectIndividual> getFlowElements(EMFObjectIndividual pool) {
		flowElements = null;
		List<? extends Object> listParticipant = select EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) from bpmnModelAccess;
		for (EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) parti : listParticipant) {
			int n = parti.processRef.flowElements.size();
			if (parti.id.toString == parameters.pool.name.toString) {
				 for (int j=0 ; j < n ; j++) {
				 	flowElements.add(parti.processRef.flowElements.get(j));
				 }
				
			}
		}
		
		return flowElements;
	}

	// --- Get the list of the associated Artifacts 

	public List<String> verifyExistenceArtifactAssociated(String nameArtifact) {

		boolean existe = false;
		listAssoArtifact = null;
		for (EMFObjectIndividualType(eClass=DEPLOYMENT_ASSOCIATION) itemAsso : select EMFObjectIndividualType(eClass=DEPLOYMENT_ASSOCIATION) from deploymentModelAccess) {
	      	for (Object itemArtifact : itemAsso.getValues("artifact")) { 
	       	     if (itemArtifact.toString.substring(9) == artifact.name ) {
	       	       	existe = true;	   	
	       	      }
				else {
	       	      	existe = false;
	       	      }
	   
	       	}
	       	if (existe) {
	       		for (Object itemArtifact : itemAsso.getValues("artifact")) {
	       		  	if (!(itemArtifact.toString.substring(9).toString == artifact.name)) {
						listAssoArtifact.add(itemArtifact.toString.substring(9).toString);
					}
	       		  }       	
	       	}			
		}
		return listAssoArtifact;
	}

   // --- Get the Security annotation for the selected flowElement
    public boolean checkAnnotations(String flowElements) {
     
    	  List<? extends Object> associations = select EMFObjectIndividualType(eClass=BPMN_ASSOCIATION) from bpmnModelAccess;
    	  List<? extends Object> annotations = select EMFObjectIndividualType(eClass=BPMN_TEXT_ANNOTATION) from bpmnModelAccess;
    	  boolean checkannotation = false;
    	  for (EMFObjectIndividualType(eClass=BPMN_ASSOCIATION) asso : associations) {
    	  	for (EMFObjectIndividualType(eClass=BPMN_TEXT_ANNOTATION) annotation : annotations) {
    	  		if (parameters.flowElements == asso.sourceRef.id && annotation.id == asso.targetRef.id ) {
    	  			if (annotation.text.contains("IntegrityDo") || annotation.text.contains("ConfidentialityDo") || annotation.text.contains("PrivacyDo")) {
    	  				checkannotation = true;
    	  			}
				else {
    	  				checkannotation = false;
    	  			}	
    	  		}
    	    	}
    	  }
    	  return checkannotation;
    }

    // --- Get list of MessageFlow owned to a pool
    public List<EMFObjectIndividual> getMessageFlow (EMFObjectIndividual pool) {

    	 List<? extends Object> listParticipant = select EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) from bpmnModelAccess;
    	 List<? extends Object> listMessageFlow = select EMFObjectIndividualType(eClass=BPMN_MESSAGE_FLOW)  from bpmnModelAccess;
    	 messageFlows = null;
	 for (EMFObjectIndividualType(eClass=BPMN_PARTICIPANT) parti : listParticipant) {
	 	if (parti.id.toString == parameters.pool.name.toString) {
		 	int n = parti.processRef.flowElements.size();
		 	for (EMFObjectIndividualType(eClass=BPMN_MESSAGE_FLOW) dataflow :listMessageFlow)  {
				for (int j=0 ; j < n ; j++) {
					if (dataflow.sourceRef.toString == parti.processRef.flowElements.get(j).toString) {
						messageFlows.add(dataflow);
						
					}
				}
		 	}
	 	}
	 	
	 }

    	 return messageFlows;
    }
     
	/*public List<EMFObjectIndividual> verifyExistenceCorrep(){
		return ; 
	}*/

	public iTrustSecurityRuleTest() {
		this.devices1 = null;
		boolean checkConfidentialData = false;
		
		this.flowElements = this.getFlowElements(pool);
		this.devices1 = this.getDeploymentDevices(artifact);
		this.messageFlows = this.getMessageFlow(pool);
		this.listAssoArtifact = this.verifyExistenceArtifactAssociated(artifact.name);
		//log listAssoArtifact.toString;
		log messageFlows.toString;
		for (EMFObjectIndividual flowElt : flowElements ) {
			checkConfidentialData  = this.checkAnnotations(flowElt.toString.substring(11));
			if (checkConfidentialData == true) {
				log "private data";
				
			}
			
		}
		
	}
	
     	
     }


     public concept MessageFlowCommunicationPathLink {
		EMFObjectIndividual messageFlow with EMFObjectRole(container=bpmnModelAccess);
     	EMFObjectIndividual communicationPath with EMFObjectRole(container=deploymentModelAccess);

     	create::_create(required String nameMessage,required String nameCommPath) {	
     		
     		for (EMFObjectIndividualType(eClass=BPMN_MESSAGE_FLOW) itemMessage : select EMFObjectIndividualType(eClass=BPMN_MESSAGE_FLOW) from bpmnModelAccess) {
				if (itemMessage.name == parameters.nameMessage) {
					messageFlow = itemMessage;
				}
			}
	       	 for (EMFObjectIndividualType(eClass=DEPLOYMENT_COMMUNICATION_PATH) itemCommPath : select EMFObjectIndividualType(eClass=DEPLOYMENT_COMMUNICATION_PATH) from deploymentModelAccess) {
	        		if (itemCommPath.name == parameters.nameCommPath) {
					communicationPath =itemCommPath;
				}
	      	 }
	                 		         
	     }
  	public boolean verifySecureCommunication() {
  		boolean check = false;
  		log communicationPath.toString;
  		List<? extends Object> encrypted = communicationPath.getValues("encrypted");
  		List<? extends Object> annotations = select EMFObjectIndividualType(eClass=BPMN_TEXT_ANNOTATION) from bpmnModelAccess; 
  		List<? extends Object> associations = select EMFObjectIndividualType(eClass=BPMN_ASSOCIATION) from bpmnModelAccess;
  		for (EMFObjectIndividualType(eClass=BPMN_ASSOCIATION) asso : associations ) {
  			if (asso.targetRef.id == messageFlow.toString.substring(12)) {
  				for (EMFObjectIndividualType(eClass=BPMN_TEXT_ANNOTATION) annota : annotations) {
  					if (asso.sourceRef.id == annota.id) {
  						if (encrypted != null && (annota.text.contains("NonRepudMF") || annota.text.contains("ConfidentialityMF") || annota.text.contains("IntegrityMF")) ) {
							check =true;
						}
						else {
							check = false;
						     }
					}
							
  				}	
  			}
  		}
     	return check;
  	  }
     

	delete() {
		delete messageFlow;
		delete communicationPath;
	}
	}
}
